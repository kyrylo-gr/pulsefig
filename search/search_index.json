{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>pulsefig</code>: Draw Your Pulse Sequences","text":"<p><code>pulsefig</code> is a Python library designed for easy and intuitive drawing of pulse sequences, commonly used in quantum computing, nuclear magnetic resonance (NMR), and other fields that involve waveform manipulation. The library simplifies the process of visualizing pulse sequences by providing flexible and powerful tools to define, customize, and plot these sequences.</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install <code>pulsefig</code> via pip:</p> <pre><code>pip install pulsefig\n</code></pre> <p>For more detailed installation instructions, please refer to the How to install guide.</p>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#basic-usage","title":"Basic Usage","text":"<p>Here is a simple example to get you started with <code>pulsefig</code>:</p> <pre><code>from pulsefig import Element, Line, LineEnsemble\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\n# Define a line with elements attached\nline1 = Line(\"line1\").attach_elements(\n    Element(0, 1),\n    Element(2, 4)\n)\n\n# Define another line\nline2 = Line(\"line2\").attach_elements(\n    Element(0, 2)\n    Element(duration=4, delay=1)\n)\n\n# Create a figure and axis\nfig, ax = plt.subplots(1, 1)\n\n# Combine the lines into an ensemble and draw\n(line1 + line2).draw(ax).config_ax(ax1)\n\nplt.show()\n</code></pre> <p>This code will generate a plot of two pulse sequences defined by the <code>line1</code> and <code>line2</code> objects. You can customize each element, its functions, and styling to create complex and detailed pulse sequence diagrams.</p>"},{"location":"#advanced-example","title":"Advanced Example","text":"<p>In the following example, we create a more complex pulse sequence involving multiple lines, Gaussian pulses, and exponential filters:</p> <pre><code>reset_line = Line(\"reset\").attach_elements(Element(0, 5).set(xlabel=\"10\u03bcs\"))\nflux_line = Line(\"flux\").attach_elements(\n    flux_rise := Element.ExpFilter(0, 3.75, duration=0.2)\n    .set(ylabel=\"\u0394\u1d69\")\n    .update_style(alpha=0.3, data_index=0)\n    .sweep_height(start_alpha=0.1)\n)\n\ndrive_line  = Line(\"drive\").attach_elements(\n    drive_pi := Element.Gaussian(flux_rise, duration=1).set(subtitle=\"\u03c0\")\n)\nreadout_line = Line(\"readout\").attach_elements(Element(drive_pi, duration=1, delay=0.5))\n\n# Combine all lines into an ensemble\nens = drive_line  + readout_line + flux_line + reset_line\n\n# Plotting the ensemble\nfig, ax1 = plt.subplots(1, 1, figsize=(6, 4))\nens.draw(ax1).config_ax(ax1)\nfig.suptitle(\"Pulse Sequence Example\")\nplt.show()\n</code></pre> <p>In this advanced example:</p> <ul> <li>Reset Line: Represents a reset pulse with a duration of 5 units.</li> <li>Flux Line: Shows an exponential filter rising over time.</li> <li>Drive Line: Contains a Gaussian pulse corresponding to a \u03c0 rotation.</li> <li>Readout Line: Follows the Gaussian pulse and includes a delay.</li> </ul> <p>This sequence is typical in many quantum computing scenarios, where different pulse shapes and sequences are used to manipulate qubits.</p>"},{"location":"#custom-pulses","title":"Custom pulses","text":"<p>You can create a completely custom shapes with <code>pulsefig</code>:</p> <pre><code>from pulsefig import Element, Line, LineEnsemble\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(1, 1)\nax.axis(\"off\")\n\n# Define a line with elements attached\nline1 = Line(\"drive\").attach_elements(\n    Element(0, 1)\n    .attach_func(lambda x: np.sin(x * 2 * np.pi), end=0.25)\n    .attach_func(lambda x: np.exp(-((x - 0.5) ** 2) / 0.05), start=0.5, end=1)\n    .update_style(alpha=0.3, data_index=0)\n    .sweep_height(start_alpha=0.1)\n    .set(subtitle=\"pi\", xlabel=\"dt\"),\n    Element(2, 4)\n    .attach_func(lambda x: np.sin(x * 2 * np.pi), end=0.25)\n    .attach_func(lambda x: np.exp(-((x - 0.5) ** 2) / 0.05), start=0.5, end=1)\n    .update_style(alpha=0.3, data_index=0)\n    .sweep_height(start_alpha=0.1),\n)\n\n# Define another line\nline2 = Line(\"g_h\").attach_elements(\n    Element(0, 2)\n    .set(alpha=0.3, marker=\"0\", subtitle=\"pi\", xlabel=\"dt\", ylabel=\"amp\")\n    .attach_func(lambda x: np.sin(x * 2 * np.pi), end=0.25)\n    .attach_func(lambda x: np.exp(-((x - 0.5) ** 2) / 0.05), start=0.5, end=1)\n    .update_style(alpha=0.3, data_index=0)\n    .sweep_height(start_alpha=0.1),\n    Element(duration=4, delay=1)\n    .attach_func(lambda x: np.sin(x * 2 * np.pi), end=0.25)\n    .attach_func(lambda x: np.exp(-((x - 0.5) ** 2) / 0.05), start=0.5, end=1)\n    .update_style(alpha=0.3, data_index=0)\n    .sweep_height(start_alpha=0.1),\n)\n\n# Combine the lines into an ensemble and draw\n(line1 + line2).draw(ax)\n</code></pre> <p>This code will generate a plot of two pulse sequences defined by the <code>line1</code> and <code>line2</code> objects. You can customize each element, its functions, and styling to create complex and detailed pulse sequence diagrams.</p> <p>For further insight, please refer to the First Steps guide</p> <p>Feel free to explore the examples, customize the sequences, and integrate <code>pulsefig</code> into your projects for pulse sequence visualization!</p>"},{"location":"about/","title":"About <code>pulsefig</code>","text":"<p><code>pulsefig</code> is a Python library designed for easy and intuitive drawing of pulse sequences, commonly used in quantum computing, nuclear magnetic resonance (NMR), and other fields that involve waveform manipulation. The library simplifies the process of visualizing pulse sequences by providing flexible and powerful tools to define, customize, and plot these sequences.</p> <p>Created by <code>kyrylo.gr</code> during PhD in LKB (Paris, France)</p> <p>Any feedback is welcome! Feel free to open an issue on GitHub</p> <p>Analogous projects that I found:</p> <ul> <li>pulseplot by kaustubhmote</li> </ul>"},{"location":"examples/","title":"Different example","text":"<p>Here is examples for different plots</p>"},{"location":"examples/#example-1","title":"Example 1","text":""},{"location":"examples/#example-2","title":"Example 2","text":""},{"location":"examples/#example-3","title":"Example 3","text":""},{"location":"examples/example_1/","title":"Example 1","text":""},{"location":"examples/example_1/#simple-example","title":"Simple example","text":"<p><pre><code>import matplotlib.pyplot as plt\n\nfrom pulsefig import Element, Line\n\n# Define a line with elements attached\nline1 = Line(\"line1\").attach_elements(\n    Element(0, 1),\n    Element(2, 4),\n)\n\n# Define another line\nline2 = Line(\"line2\").attach_elements(\n    Element(0, 2),\n    Element(duration=4, delay=1),\n)\n\n# Create a figure and axis\nfig, ax = plt.subplots(1, 1)\n\n# Combine the lines into an ensemble and draw\n(line1 + line2).draw(ax).config_ax(ax)\n\nfig.savefig(\"../figures/example_1.svg\")\n</code></pre> </p>"},{"location":"examples/example_2/","title":"Example 2","text":""},{"location":"examples/example_2/#advanced-example","title":"Advanced example","text":"<p><pre><code>import matplotlib.pyplot as plt\n\nfrom pulsefig import Element, Line\n\nreset_line = Line(\"reset\").attach_elements(Element(0, 5).set(xlabel=\"10\u03bcs\"))\nflux_line = Line(\"flux\").attach_elements(\n    flux_rise := Element.ExpFilter(0, 3.75, duration=0.2)\n    .set(ylabel=\" \u0394\u1d69\")\n    .update_style(alpha=0.3, data_index=0)\n    .sweep_height(start_alpha=0.1)\n)\n\ndrive_line = Line(\"drive\").attach_elements(\n    drive_pi := Element.Gaussian(flux_rise, duration=1).set(subtitle=\"\u03c0\")\n)\nreadout_line = Line(\"readout\").attach_elements(Element(drive_pi, duration=1, delay=0.5))\n\n# Combine all lines into an ensemble\nens = drive_line + readout_line + flux_line + reset_line\n\n# Plotting the ensemble\nfig, ax1 = plt.subplots(1, 1, figsize=(6, 4))\nens.draw(ax1).config_ax(ax1)\n\nfig.savefig(\"../figures/example_2.svg\")\n</code></pre> </p>"},{"location":"examples/example_3/","title":"Example 3","text":""},{"location":"examples/example_3/#custom-example","title":"Custom example","text":"<p><pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n\nfrom pulsefig import Element, Line\n\nfig, ax = plt.subplots(1, 1)\n\n# Define a line with elements attached\nline1 = Line(\"drive\").attach_elements(\n    Element(0, 1)\n    .attach_func(lambda x: np.sin(x * 2 * np.pi), end=0.25)\n    .attach_func(lambda x: np.exp(-((x - 0.5) ** 2) / 0.05), start=0.5, end=1)\n    .update_style(alpha=0.3, data_index=0)\n    .sweep_height(start_alpha=0.1)\n    .set(subtitle=\"pi\", xlabel=\"dt\"),\n    Element(2, 4)\n    .attach_func(lambda x: np.sin(x * 2 * np.pi), end=0.25)\n    .attach_func(lambda x: np.exp(-((x - 0.5) ** 2) / 0.05), start=0.5, end=1)\n    .update_style(alpha=0.3, data_index=0)\n    .sweep_height(start_alpha=0.1),\n)\n\n# Define another line\nline2 = Line(\"g_h\").attach_elements(\n    Element(1, 3)\n    .set(alpha=0.3, marker=\"0\")\n    .set_subtitle(\"pi\", xpos=0.3)\n    .set_ylabel(\"amp\", xpos=0.4, ypos=0.65)\n    .set_xlabel(\"dt\", xpos=0.3)\n    .attach_func(lambda x: np.sin(x * 2 * np.pi), end=0.25)\n    .attach_func(lambda x: np.exp(-((x - 0.5) ** 2) / 0.05), start=0.5, end=1)\n    .update_style(alpha=0.3, data_index=0)\n    .sweep_height(start_alpha=0.1),\n)\n\n# Combine the lines into an ensemble and draw\n(line1 + line2).draw(ax).config_ax(ax)\n\nfig.savefig(\"../figures/example_3.svg\")\n</code></pre> </p>"},{"location":"releases/","title":"Index","text":"<p>Current edition is in beta version.</p> <ul> <li>0.1.0: Basic functionality to create pulse figures</li> </ul>"},{"location":"starting_guide/first_steps/","title":"Getting Started with <code>pulsefig</code>","text":"<p>Make sure you have installed the package before.</p> <p>Here is a simple example to get you started with <code>pulsefig</code>:</p> <pre><code>from pulsefig import Element, Line, LineEnsemble\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\n# Define a line with elements attached\nline1 = Line(\"line1\").attach_elements(\n    Element(0, 1),\n    Element(2, 4),\n)\n\n# Define another line\nline2 = Line(\"line2\").attach_elements(\n    Element(0, 2),\n    Element(duration=4, delay=1),\n)\n\n# Create a figure and axis\nfig, ax = plt.subplots(1, 1)\n\n# Combine the lines into an ensemble and draw\n(line1 + line2).draw(ax).config_ax(ax)\n\nplt.show()\n</code></pre> <p>This code will generate a plot of two pulse sequences defined by the <code>line1</code> and <code>line2</code> objects. You can customize each element, its functions, and styling to create complex and detailed pulse sequence diagrams.</p> <p>For more advance examples explore more examples</p>"},{"location":"starting_guide/install/","title":"Installation <code>pulsefig</code>","text":"<p>You can install the <code>pulsefig</code> library using either pip or by pulling the repository directly from GitHub.</p>"},{"location":"starting_guide/install/#option-1-install-via-pip","title":"Option 1: Install via Pip","text":"<p>Open your terminal and run the following command</p> <pre><code>pip install pulsefig\n</code></pre>"},{"location":"starting_guide/install/#option-2-install-from-github","title":"Option 2: Install from GitHub","text":"<p>You can also install <code>pulsefig</code> directly from its GitHub repository. This option is useful if you want to work with the latest development version or if you need to customize the library. Here's how to do it:</p> <ol> <li>Clone the <code>pulsefig</code> repository from GitHub using the following command:</li> </ol> <pre><code>git clone https://github.com/kyrylo-gr/pulsefig.git\n</code></pre> <ol> <li>Enter the directory and install the package.</li> </ol> <pre><code>cd pulsefig\npip install -e .\n</code></pre> <p><code>-e</code> allows you to link the library to the directory that you created, therefore allows you to change the code inside this directory. Instead <code>pip install -e .</code> you can run <code>python setup.py develop</code> if you prefer.</p>"},{"location":"starting_guide/install/#thats-it","title":"That's it!","text":"<p>You've successfully installed the <code>pulsefig</code> library. You can now start incorporating <code>pulsefig</code> into your Python projects.</p> <p>For further insight, please refer to the First Steps guide.</p>"}]}